#!/usr/bin/env node

// require('dotenv/config');

/**
 * Module dependencies.
 */

const config = require('../config/config');
var app = require('../app');
var debug = require('debug')('demo:server');
var http = require('http');
var cluster = require('cluster');


//Cluster Programming
// if (cluster.isMaster) {
//   var numWorkers = require('os').cpus().length;

//   console.log('Master cluster setting up ' + numWorkers + ' workers...');

//   for (var i = 0; i < numWorkers; i++) {
//     cluster.fork();
//   }

//   cluster.on('online', function (worker) {
//     console.log('Worker ' + worker.process.pid + ' is online');
//   });

//   cluster.on('exit', function (worker, code, signal) {
//     console.log('Worker ' + worker.process.pid + ' died with code: ' + code + ', and signal: ' + signal);
//     console.log('Starting a new worker');
//     cluster.fork();
//   });
// }


// else {

  /**
   * Get port from environment and store in Express.
   */

  var port = normalizePort(config.PORT);
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port, function () {
    if (process.send) process.send('online');
  });
  server.on('error', onError);
  server.on('listening', onListening);

  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }


  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }
  //Global error handling
  process.on('uncaughtException', function (err) {
    // handle the error safely
    errorMsg = 'Something went wrong! Kindly reload the page!';
    console.log(err, errorMsg);
    // process.send('offline');
    process.exit(0);
  });

  process.on('exit', code => {
    console.log(`About to exit with code: ${code}`);
  });

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    console.log('Serve started at PORT:' + bind);
    debug('Listening on ' + bind);
  }
// }